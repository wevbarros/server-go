name: Publish Docker image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: wev6
          password: Hokage150201
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: wev6/goserver
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}



























# # This is a basic workflow to help you get started with Actions
# name: Deploy to OKE OCI

# # Controls when the workflow will run
# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:
  
# env:
#   ACTIONS_ALLOW_UNSECURE_COMMANDS: true
#   IMAGE_NAME: wev6/goserver:latest
#   DEPLOYMENT_NAME: goserver
#   PORT: 3000

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2        

#       # Runs a set of commands using the runners shell
#       - name: 'Write Config & Key Files'
#         run: |
#           mkdir ~/.oci
#           echo "[DEFAULT]" >> ~/.oci/config
#           echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
#           echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
#           echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
#           echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config         
#           echo "${{secrets.OCI_PASSPHRASE}}" >> ~/.oci/key.pem
#           echo "key_file=~/.oci/key.pem" >> ~/.oci/config    
          
#       - name: 'Install OCI CLI'
#         run: |
#           curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
#           chmod +x install.sh
#           ./install.sh --accept-all-defaults
#           echo "::add-path::/home/runner/bin"
#           exec -l $SHELL
          
#       - name: 'Fix Config File Permissions'
#         run: |
#           oci setup repair-file-permissions --file ~/.oci/key.pem
#           oci setup repair-file-permissions --file ~/.oci/config
          
#       - name: 'Install kubectl'
#         run: |
#           mkdir /tmp/.kube
#           curl -L -O "https://dl.k8s.io/release/v1.22.4/bin/linux/amd64/kubectl" -o kubectl
#           chmod +x kubectl
#           mv kubectl /usr/local/bin
          
#       - name: 'Download the KUBECONFIG'
#         run: |
#           mkdir -p ~/.kube
#           oci ce cluster create-kubeconfig --cluster-id ${{ secrets.OKE_OCID }} --file ~/.kube/config --region ${{secrets.OCI_REGION}} --token-version 2.0.0 
#           export KUBECONFIG=~/.kube/config
          
#       - name: 'Deploy the API on OKE'
#         run: |
#           kubectl delete deployment $DEPLOYMENT_NAME
#           kubectl create deployment $DEPLOYMENT_NAME --image=$IMAGE_NAME --dry-run -o yaml > deployment.yaml
#           kubectl apply -f deployment.yaml
#           kubectl rollout status deployment/$DEPLOYMENT_NAME
#           kubectl create service loadbalancer $DEPLOYMENT_NAME-service --tcp=3000:$PORT --dry-run -o yaml > service.yaml
#           kubectl apply -f service.yaml
#           kubectl get services -o wide
